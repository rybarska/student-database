// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: experiments.proto

#include "experiments.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace experiments {
PROTOBUF_CONSTEXPR SetupRequest::SetupRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x1name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x2name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x3name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x4name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x5name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.samples_)*/0
  , /*decltype(_impl_.minrange_)*/0
  , /*decltype(_impl_.maxrange_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetupRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetupRequestDefaultTypeInternal() {}
  union {
    SetupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetupRequestDefaultTypeInternal _SetupRequest_default_instance_;
PROTOBUF_CONSTEXPR OutputValueReply::OutputValueReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x1_)*/0
  , /*decltype(_impl_.x2_)*/0
  , /*decltype(_impl_.x3_)*/0
  , /*decltype(_impl_.x4_)*/0
  , /*decltype(_impl_.x5_)*/0
  , /*decltype(_impl_.y1_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OutputValueReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutputValueReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutputValueReplyDefaultTypeInternal() {}
  union {
    OutputValueReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutputValueReplyDefaultTypeInternal _OutputValueReply_default_instance_;
PROTOBUF_CONSTEXPR AllValuesReply::AllValuesReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.allvaluesreply_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AllValuesReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllValuesReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllValuesReplyDefaultTypeInternal() {}
  union {
    AllValuesReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllValuesReplyDefaultTypeInternal _AllValuesReply_default_instance_;
}  // namespace experiments
static ::_pb::Metadata file_level_metadata_experiments_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_experiments_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_experiments_2eproto = nullptr;

const uint32_t TableStruct_experiments_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::experiments::SetupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::experiments::SetupRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::experiments::SetupRequest, _impl_.samples_),
  PROTOBUF_FIELD_OFFSET(::experiments::SetupRequest, _impl_.minrange_),
  PROTOBUF_FIELD_OFFSET(::experiments::SetupRequest, _impl_.maxrange_),
  PROTOBUF_FIELD_OFFSET(::experiments::SetupRequest, _impl_.x1name_),
  PROTOBUF_FIELD_OFFSET(::experiments::SetupRequest, _impl_.x2name_),
  PROTOBUF_FIELD_OFFSET(::experiments::SetupRequest, _impl_.x3name_),
  PROTOBUF_FIELD_OFFSET(::experiments::SetupRequest, _impl_.x4name_),
  PROTOBUF_FIELD_OFFSET(::experiments::SetupRequest, _impl_.x5name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::experiments::OutputValueReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::experiments::OutputValueReply, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::experiments::OutputValueReply, _impl_.x1_),
  PROTOBUF_FIELD_OFFSET(::experiments::OutputValueReply, _impl_.x2_),
  PROTOBUF_FIELD_OFFSET(::experiments::OutputValueReply, _impl_.x3_),
  PROTOBUF_FIELD_OFFSET(::experiments::OutputValueReply, _impl_.x4_),
  PROTOBUF_FIELD_OFFSET(::experiments::OutputValueReply, _impl_.x5_),
  PROTOBUF_FIELD_OFFSET(::experiments::OutputValueReply, _impl_.y1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::experiments::AllValuesReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::experiments::AllValuesReply, _impl_.allvaluesreply_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::experiments::SetupRequest)},
  { 15, -1, -1, sizeof(::experiments::OutputValueReply)},
  { 28, -1, -1, sizeof(::experiments::AllValuesReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::experiments::_SetupRequest_default_instance_._instance,
  &::experiments::_OutputValueReply_default_instance_._instance,
  &::experiments::_AllValuesReply_default_instance_._instance,
};

const char descriptor_table_protodef_experiments_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021experiments.proto\022\013experiments\"\237\001\n\014Set"
  "upRequest\022\n\n\002id\030\001 \001(\005\022\017\n\007samples\030\002 \001(\005\022\020"
  "\n\010minrange\030\003 \001(\001\022\020\n\010maxrange\030\004 \001(\001\022\016\n\006x1"
  "name\030\005 \001(\t\022\016\n\006x2name\030\006 \001(\t\022\016\n\006x3name\030\007 \001"
  "(\t\022\016\n\006x4name\030\010 \001(\t\022\016\n\006x5name\030\t \001(\t\"f\n\020Ou"
  "tputValueReply\022\n\n\002id\030\001 \001(\005\022\n\n\002x1\030\002 \001(\001\022\n"
  "\n\002x2\030\003 \001(\001\022\n\n\002x3\030\004 \001(\001\022\n\n\002x4\030\005 \001(\001\022\n\n\002x5"
  "\030\006 \001(\001\022\n\n\002y1\030\007 \001(\001\"G\n\016AllValuesReply\0225\n\016"
  "allValuesReply\030\001 \003(\0132\035.experiments.Outpu"
  "tValueReply2O\n\nSimulation\022A\n\005DoLHS\022\031.exp"
  "eriments.SetupRequest\032\033.experiments.AllV"
  "aluesReply\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_experiments_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_experiments_2eproto = {
    false, false, 460, descriptor_table_protodef_experiments_2eproto,
    "experiments.proto",
    &descriptor_table_experiments_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_experiments_2eproto::offsets,
    file_level_metadata_experiments_2eproto, file_level_enum_descriptors_experiments_2eproto,
    file_level_service_descriptors_experiments_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_experiments_2eproto_getter() {
  return &descriptor_table_experiments_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_experiments_2eproto(&descriptor_table_experiments_2eproto);
namespace experiments {

// ===================================================================

class SetupRequest::_Internal {
 public:
};

SetupRequest::SetupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:experiments.SetupRequest)
}
SetupRequest::SetupRequest(const SetupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetupRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x1name_){}
    , decltype(_impl_.x2name_){}
    , decltype(_impl_.x3name_){}
    , decltype(_impl_.x4name_){}
    , decltype(_impl_.x5name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.samples_){}
    , decltype(_impl_.minrange_){}
    , decltype(_impl_.maxrange_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.x1name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x1name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_x1name().empty()) {
    _this->_impl_.x1name_.Set(from._internal_x1name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.x2name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x2name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_x2name().empty()) {
    _this->_impl_.x2name_.Set(from._internal_x2name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.x3name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x3name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_x3name().empty()) {
    _this->_impl_.x3name_.Set(from._internal_x3name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.x4name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x4name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_x4name().empty()) {
    _this->_impl_.x4name_.Set(from._internal_x4name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.x5name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x5name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_x5name().empty()) {
    _this->_impl_.x5name_.Set(from._internal_x5name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxrange_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.maxrange_));
  // @@protoc_insertion_point(copy_constructor:experiments.SetupRequest)
}

inline void SetupRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x1name_){}
    , decltype(_impl_.x2name_){}
    , decltype(_impl_.x3name_){}
    , decltype(_impl_.x4name_){}
    , decltype(_impl_.x5name_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.samples_){0}
    , decltype(_impl_.minrange_){0}
    , decltype(_impl_.maxrange_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.x1name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x1name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.x2name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x2name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.x3name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x3name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.x4name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x4name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.x5name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x5name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetupRequest::~SetupRequest() {
  // @@protoc_insertion_point(destructor:experiments.SetupRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.x1name_.Destroy();
  _impl_.x2name_.Destroy();
  _impl_.x3name_.Destroy();
  _impl_.x4name_.Destroy();
  _impl_.x5name_.Destroy();
}

void SetupRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:experiments.SetupRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.x1name_.ClearToEmpty();
  _impl_.x2name_.ClearToEmpty();
  _impl_.x3name_.ClearToEmpty();
  _impl_.x4name_.ClearToEmpty();
  _impl_.x5name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxrange_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.maxrange_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 samples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double minrange = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.minrange_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double maxrange = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.maxrange_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string x1name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_x1name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "experiments.SetupRequest.x1name"));
        } else
          goto handle_unusual;
        continue;
      // string x2name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_x2name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "experiments.SetupRequest.x2name"));
        } else
          goto handle_unusual;
        continue;
      // string x3name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_x3name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "experiments.SetupRequest.x3name"));
        } else
          goto handle_unusual;
        continue;
      // string x4name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_x4name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "experiments.SetupRequest.x4name"));
        } else
          goto handle_unusual;
        continue;
      // string x5name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_x5name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "experiments.SetupRequest.x5name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetupRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:experiments.SetupRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 samples = 2;
  if (this->_internal_samples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_samples(), target);
  }

  // double minrange = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_minrange = this->_internal_minrange();
  uint64_t raw_minrange;
  memcpy(&raw_minrange, &tmp_minrange, sizeof(tmp_minrange));
  if (raw_minrange != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_minrange(), target);
  }

  // double maxrange = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maxrange = this->_internal_maxrange();
  uint64_t raw_maxrange;
  memcpy(&raw_maxrange, &tmp_maxrange, sizeof(tmp_maxrange));
  if (raw_maxrange != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_maxrange(), target);
  }

  // string x1name = 5;
  if (!this->_internal_x1name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_x1name().data(), static_cast<int>(this->_internal_x1name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "experiments.SetupRequest.x1name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_x1name(), target);
  }

  // string x2name = 6;
  if (!this->_internal_x2name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_x2name().data(), static_cast<int>(this->_internal_x2name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "experiments.SetupRequest.x2name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_x2name(), target);
  }

  // string x3name = 7;
  if (!this->_internal_x3name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_x3name().data(), static_cast<int>(this->_internal_x3name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "experiments.SetupRequest.x3name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_x3name(), target);
  }

  // string x4name = 8;
  if (!this->_internal_x4name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_x4name().data(), static_cast<int>(this->_internal_x4name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "experiments.SetupRequest.x4name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_x4name(), target);
  }

  // string x5name = 9;
  if (!this->_internal_x5name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_x5name().data(), static_cast<int>(this->_internal_x5name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "experiments.SetupRequest.x5name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_x5name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experiments.SetupRequest)
  return target;
}

size_t SetupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:experiments.SetupRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string x1name = 5;
  if (!this->_internal_x1name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_x1name());
  }

  // string x2name = 6;
  if (!this->_internal_x2name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_x2name());
  }

  // string x3name = 7;
  if (!this->_internal_x3name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_x3name());
  }

  // string x4name = 8;
  if (!this->_internal_x4name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_x4name());
  }

  // string x5name = 9;
  if (!this->_internal_x5name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_x5name());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 samples = 2;
  if (this->_internal_samples() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_samples());
  }

  // double minrange = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_minrange = this->_internal_minrange();
  uint64_t raw_minrange;
  memcpy(&raw_minrange, &tmp_minrange, sizeof(tmp_minrange));
  if (raw_minrange != 0) {
    total_size += 1 + 8;
  }

  // double maxrange = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maxrange = this->_internal_maxrange();
  uint64_t raw_maxrange;
  memcpy(&raw_maxrange, &tmp_maxrange, sizeof(tmp_maxrange));
  if (raw_maxrange != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetupRequest::GetClassData() const { return &_class_data_; }


void SetupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetupRequest*>(&to_msg);
  auto& from = static_cast<const SetupRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:experiments.SetupRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_x1name().empty()) {
    _this->_internal_set_x1name(from._internal_x1name());
  }
  if (!from._internal_x2name().empty()) {
    _this->_internal_set_x2name(from._internal_x2name());
  }
  if (!from._internal_x3name().empty()) {
    _this->_internal_set_x3name(from._internal_x3name());
  }
  if (!from._internal_x4name().empty()) {
    _this->_internal_set_x4name(from._internal_x4name());
  }
  if (!from._internal_x5name().empty()) {
    _this->_internal_set_x5name(from._internal_x5name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_samples() != 0) {
    _this->_internal_set_samples(from._internal_samples());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_minrange = from._internal_minrange();
  uint64_t raw_minrange;
  memcpy(&raw_minrange, &tmp_minrange, sizeof(tmp_minrange));
  if (raw_minrange != 0) {
    _this->_internal_set_minrange(from._internal_minrange());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maxrange = from._internal_maxrange();
  uint64_t raw_maxrange;
  memcpy(&raw_maxrange, &tmp_maxrange, sizeof(tmp_maxrange));
  if (raw_maxrange != 0) {
    _this->_internal_set_maxrange(from._internal_maxrange());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetupRequest::CopyFrom(const SetupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:experiments.SetupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupRequest::IsInitialized() const {
  return true;
}

void SetupRequest::InternalSwap(SetupRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.x1name_, lhs_arena,
      &other->_impl_.x1name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.x2name_, lhs_arena,
      &other->_impl_.x2name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.x3name_, lhs_arena,
      &other->_impl_.x3name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.x4name_, lhs_arena,
      &other->_impl_.x4name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.x5name_, lhs_arena,
      &other->_impl_.x5name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetupRequest, _impl_.maxrange_)
      + sizeof(SetupRequest::_impl_.maxrange_)
      - PROTOBUF_FIELD_OFFSET(SetupRequest, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_experiments_2eproto_getter, &descriptor_table_experiments_2eproto_once,
      file_level_metadata_experiments_2eproto[0]);
}

// ===================================================================

class OutputValueReply::_Internal {
 public:
};

OutputValueReply::OutputValueReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:experiments.OutputValueReply)
}
OutputValueReply::OutputValueReply(const OutputValueReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OutputValueReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x1_){}
    , decltype(_impl_.x2_){}
    , decltype(_impl_.x3_){}
    , decltype(_impl_.x4_){}
    , decltype(_impl_.x5_){}
    , decltype(_impl_.y1_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x1_, &from._impl_.x1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.x1_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:experiments.OutputValueReply)
}

inline void OutputValueReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x1_){0}
    , decltype(_impl_.x2_){0}
    , decltype(_impl_.x3_){0}
    , decltype(_impl_.x4_){0}
    , decltype(_impl_.x5_){0}
    , decltype(_impl_.y1_){0}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OutputValueReply::~OutputValueReply() {
  // @@protoc_insertion_point(destructor:experiments.OutputValueReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OutputValueReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OutputValueReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OutputValueReply::Clear() {
// @@protoc_insertion_point(message_clear_start:experiments.OutputValueReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.x1_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutputValueReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double x1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.x1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double x2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.x2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double x3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.x3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double x4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.x4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double x5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.x5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.y1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutputValueReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:experiments.OutputValueReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // double x1 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x1 = this->_internal_x1();
  uint64_t raw_x1;
  memcpy(&raw_x1, &tmp_x1, sizeof(tmp_x1));
  if (raw_x1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_x1(), target);
  }

  // double x2 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x2 = this->_internal_x2();
  uint64_t raw_x2;
  memcpy(&raw_x2, &tmp_x2, sizeof(tmp_x2));
  if (raw_x2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_x2(), target);
  }

  // double x3 = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x3 = this->_internal_x3();
  uint64_t raw_x3;
  memcpy(&raw_x3, &tmp_x3, sizeof(tmp_x3));
  if (raw_x3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_x3(), target);
  }

  // double x4 = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x4 = this->_internal_x4();
  uint64_t raw_x4;
  memcpy(&raw_x4, &tmp_x4, sizeof(tmp_x4));
  if (raw_x4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_x4(), target);
  }

  // double x5 = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x5 = this->_internal_x5();
  uint64_t raw_x5;
  memcpy(&raw_x5, &tmp_x5, sizeof(tmp_x5));
  if (raw_x5 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_x5(), target);
  }

  // double y1 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y1 = this->_internal_y1();
  uint64_t raw_y1;
  memcpy(&raw_y1, &tmp_y1, sizeof(tmp_y1));
  if (raw_y1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_y1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experiments.OutputValueReply)
  return target;
}

size_t OutputValueReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:experiments.OutputValueReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x1 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x1 = this->_internal_x1();
  uint64_t raw_x1;
  memcpy(&raw_x1, &tmp_x1, sizeof(tmp_x1));
  if (raw_x1 != 0) {
    total_size += 1 + 8;
  }

  // double x2 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x2 = this->_internal_x2();
  uint64_t raw_x2;
  memcpy(&raw_x2, &tmp_x2, sizeof(tmp_x2));
  if (raw_x2 != 0) {
    total_size += 1 + 8;
  }

  // double x3 = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x3 = this->_internal_x3();
  uint64_t raw_x3;
  memcpy(&raw_x3, &tmp_x3, sizeof(tmp_x3));
  if (raw_x3 != 0) {
    total_size += 1 + 8;
  }

  // double x4 = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x4 = this->_internal_x4();
  uint64_t raw_x4;
  memcpy(&raw_x4, &tmp_x4, sizeof(tmp_x4));
  if (raw_x4 != 0) {
    total_size += 1 + 8;
  }

  // double x5 = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x5 = this->_internal_x5();
  uint64_t raw_x5;
  memcpy(&raw_x5, &tmp_x5, sizeof(tmp_x5));
  if (raw_x5 != 0) {
    total_size += 1 + 8;
  }

  // double y1 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y1 = this->_internal_y1();
  uint64_t raw_y1;
  memcpy(&raw_y1, &tmp_y1, sizeof(tmp_y1));
  if (raw_y1 != 0) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutputValueReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OutputValueReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutputValueReply::GetClassData() const { return &_class_data_; }


void OutputValueReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OutputValueReply*>(&to_msg);
  auto& from = static_cast<const OutputValueReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:experiments.OutputValueReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x1 = from._internal_x1();
  uint64_t raw_x1;
  memcpy(&raw_x1, &tmp_x1, sizeof(tmp_x1));
  if (raw_x1 != 0) {
    _this->_internal_set_x1(from._internal_x1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x2 = from._internal_x2();
  uint64_t raw_x2;
  memcpy(&raw_x2, &tmp_x2, sizeof(tmp_x2));
  if (raw_x2 != 0) {
    _this->_internal_set_x2(from._internal_x2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x3 = from._internal_x3();
  uint64_t raw_x3;
  memcpy(&raw_x3, &tmp_x3, sizeof(tmp_x3));
  if (raw_x3 != 0) {
    _this->_internal_set_x3(from._internal_x3());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x4 = from._internal_x4();
  uint64_t raw_x4;
  memcpy(&raw_x4, &tmp_x4, sizeof(tmp_x4));
  if (raw_x4 != 0) {
    _this->_internal_set_x4(from._internal_x4());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x5 = from._internal_x5();
  uint64_t raw_x5;
  memcpy(&raw_x5, &tmp_x5, sizeof(tmp_x5));
  if (raw_x5 != 0) {
    _this->_internal_set_x5(from._internal_x5());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y1 = from._internal_y1();
  uint64_t raw_y1;
  memcpy(&raw_y1, &tmp_y1, sizeof(tmp_y1));
  if (raw_y1 != 0) {
    _this->_internal_set_y1(from._internal_y1());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutputValueReply::CopyFrom(const OutputValueReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:experiments.OutputValueReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputValueReply::IsInitialized() const {
  return true;
}

void OutputValueReply::InternalSwap(OutputValueReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutputValueReply, _impl_.id_)
      + sizeof(OutputValueReply::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(OutputValueReply, _impl_.x1_)>(
          reinterpret_cast<char*>(&_impl_.x1_),
          reinterpret_cast<char*>(&other->_impl_.x1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputValueReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_experiments_2eproto_getter, &descriptor_table_experiments_2eproto_once,
      file_level_metadata_experiments_2eproto[1]);
}

// ===================================================================

class AllValuesReply::_Internal {
 public:
};

AllValuesReply::AllValuesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:experiments.AllValuesReply)
}
AllValuesReply::AllValuesReply(const AllValuesReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllValuesReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.allvaluesreply_){from._impl_.allvaluesreply_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:experiments.AllValuesReply)
}

inline void AllValuesReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.allvaluesreply_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AllValuesReply::~AllValuesReply() {
  // @@protoc_insertion_point(destructor:experiments.AllValuesReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllValuesReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.allvaluesreply_.~RepeatedPtrField();
}

void AllValuesReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllValuesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:experiments.AllValuesReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.allvaluesreply_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllValuesReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .experiments.OutputValueReply allValuesReply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_allvaluesreply(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AllValuesReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:experiments.AllValuesReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .experiments.OutputValueReply allValuesReply = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_allvaluesreply_size()); i < n; i++) {
    const auto& repfield = this->_internal_allvaluesreply(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experiments.AllValuesReply)
  return target;
}

size_t AllValuesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:experiments.AllValuesReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .experiments.OutputValueReply allValuesReply = 1;
  total_size += 1UL * this->_internal_allvaluesreply_size();
  for (const auto& msg : this->_impl_.allvaluesreply_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllValuesReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllValuesReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllValuesReply::GetClassData() const { return &_class_data_; }


void AllValuesReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllValuesReply*>(&to_msg);
  auto& from = static_cast<const AllValuesReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:experiments.AllValuesReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.allvaluesreply_.MergeFrom(from._impl_.allvaluesreply_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllValuesReply::CopyFrom(const AllValuesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:experiments.AllValuesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllValuesReply::IsInitialized() const {
  return true;
}

void AllValuesReply::InternalSwap(AllValuesReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.allvaluesreply_.InternalSwap(&other->_impl_.allvaluesreply_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllValuesReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_experiments_2eproto_getter, &descriptor_table_experiments_2eproto_once,
      file_level_metadata_experiments_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace experiments
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::experiments::SetupRequest*
Arena::CreateMaybeMessage< ::experiments::SetupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::experiments::SetupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::experiments::OutputValueReply*
Arena::CreateMaybeMessage< ::experiments::OutputValueReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::experiments::OutputValueReply >(arena);
}
template<> PROTOBUF_NOINLINE ::experiments::AllValuesReply*
Arena::CreateMaybeMessage< ::experiments::AllValuesReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::experiments::AllValuesReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
