// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: experiments.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_experiments_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_experiments_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_experiments_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_experiments_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_experiments_2eproto;
namespace experiments {
class AllValuesReply;
struct AllValuesReplyDefaultTypeInternal;
extern AllValuesReplyDefaultTypeInternal _AllValuesReply_default_instance_;
class OutputValueReply;
struct OutputValueReplyDefaultTypeInternal;
extern OutputValueReplyDefaultTypeInternal _OutputValueReply_default_instance_;
class SetupRequest;
struct SetupRequestDefaultTypeInternal;
extern SetupRequestDefaultTypeInternal _SetupRequest_default_instance_;
}  // namespace experiments
PROTOBUF_NAMESPACE_OPEN
template<> ::experiments::AllValuesReply* Arena::CreateMaybeMessage<::experiments::AllValuesReply>(Arena*);
template<> ::experiments::OutputValueReply* Arena::CreateMaybeMessage<::experiments::OutputValueReply>(Arena*);
template<> ::experiments::SetupRequest* Arena::CreateMaybeMessage<::experiments::SetupRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace experiments {

// ===================================================================

class SetupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:experiments.SetupRequest) */ {
 public:
  inline SetupRequest() : SetupRequest(nullptr) {}
  ~SetupRequest() override;
  explicit PROTOBUF_CONSTEXPR SetupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetupRequest(const SetupRequest& from);
  SetupRequest(SetupRequest&& from) noexcept
    : SetupRequest() {
    *this = ::std::move(from);
  }

  inline SetupRequest& operator=(const SetupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetupRequest& operator=(SetupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetupRequest* internal_default_instance() {
    return reinterpret_cast<const SetupRequest*>(
               &_SetupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetupRequest& a, SetupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetupRequest& from) {
    SetupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "experiments.SetupRequest";
  }
  protected:
  explicit SetupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kX1NameFieldNumber = 5,
    kX2NameFieldNumber = 6,
    kX3NameFieldNumber = 7,
    kX4NameFieldNumber = 8,
    kX5NameFieldNumber = 9,
    kIdFieldNumber = 1,
    kSamplesFieldNumber = 2,
    kMinrangeFieldNumber = 3,
    kMaxrangeFieldNumber = 4,
  };
  // string x1name = 5;
  void clear_x1name();
  const std::string& x1name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_x1name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_x1name();
  PROTOBUF_NODISCARD std::string* release_x1name();
  void set_allocated_x1name(std::string* x1name);
  private:
  const std::string& _internal_x1name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x1name(const std::string& value);
  std::string* _internal_mutable_x1name();
  public:

  // string x2name = 6;
  void clear_x2name();
  const std::string& x2name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_x2name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_x2name();
  PROTOBUF_NODISCARD std::string* release_x2name();
  void set_allocated_x2name(std::string* x2name);
  private:
  const std::string& _internal_x2name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x2name(const std::string& value);
  std::string* _internal_mutable_x2name();
  public:

  // string x3name = 7;
  void clear_x3name();
  const std::string& x3name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_x3name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_x3name();
  PROTOBUF_NODISCARD std::string* release_x3name();
  void set_allocated_x3name(std::string* x3name);
  private:
  const std::string& _internal_x3name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x3name(const std::string& value);
  std::string* _internal_mutable_x3name();
  public:

  // string x4name = 8;
  void clear_x4name();
  const std::string& x4name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_x4name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_x4name();
  PROTOBUF_NODISCARD std::string* release_x4name();
  void set_allocated_x4name(std::string* x4name);
  private:
  const std::string& _internal_x4name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x4name(const std::string& value);
  std::string* _internal_mutable_x4name();
  public:

  // string x5name = 9;
  void clear_x5name();
  const std::string& x5name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_x5name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_x5name();
  PROTOBUF_NODISCARD std::string* release_x5name();
  void set_allocated_x5name(std::string* x5name);
  private:
  const std::string& _internal_x5name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x5name(const std::string& value);
  std::string* _internal_mutable_x5name();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 samples = 2;
  void clear_samples();
  int32_t samples() const;
  void set_samples(int32_t value);
  private:
  int32_t _internal_samples() const;
  void _internal_set_samples(int32_t value);
  public:

  // double minrange = 3;
  void clear_minrange();
  double minrange() const;
  void set_minrange(double value);
  private:
  double _internal_minrange() const;
  void _internal_set_minrange(double value);
  public:

  // double maxrange = 4;
  void clear_maxrange();
  double maxrange() const;
  void set_maxrange(double value);
  private:
  double _internal_maxrange() const;
  void _internal_set_maxrange(double value);
  public:

  // @@protoc_insertion_point(class_scope:experiments.SetupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x1name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x2name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x3name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x4name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x5name_;
    int32_t id_;
    int32_t samples_;
    double minrange_;
    double maxrange_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_experiments_2eproto;
};
// -------------------------------------------------------------------

class OutputValueReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:experiments.OutputValueReply) */ {
 public:
  inline OutputValueReply() : OutputValueReply(nullptr) {}
  ~OutputValueReply() override;
  explicit PROTOBUF_CONSTEXPR OutputValueReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputValueReply(const OutputValueReply& from);
  OutputValueReply(OutputValueReply&& from) noexcept
    : OutputValueReply() {
    *this = ::std::move(from);
  }

  inline OutputValueReply& operator=(const OutputValueReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputValueReply& operator=(OutputValueReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutputValueReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputValueReply* internal_default_instance() {
    return reinterpret_cast<const OutputValueReply*>(
               &_OutputValueReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OutputValueReply& a, OutputValueReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputValueReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputValueReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutputValueReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutputValueReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutputValueReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OutputValueReply& from) {
    OutputValueReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputValueReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "experiments.OutputValueReply";
  }
  protected:
  explicit OutputValueReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kX1FieldNumber = 2,
    kX2FieldNumber = 3,
    kX3FieldNumber = 4,
    kX4FieldNumber = 5,
    kX5FieldNumber = 6,
    kY1FieldNumber = 7,
    kIdFieldNumber = 1,
  };
  // double x1 = 2;
  void clear_x1();
  double x1() const;
  void set_x1(double value);
  private:
  double _internal_x1() const;
  void _internal_set_x1(double value);
  public:

  // double x2 = 3;
  void clear_x2();
  double x2() const;
  void set_x2(double value);
  private:
  double _internal_x2() const;
  void _internal_set_x2(double value);
  public:

  // double x3 = 4;
  void clear_x3();
  double x3() const;
  void set_x3(double value);
  private:
  double _internal_x3() const;
  void _internal_set_x3(double value);
  public:

  // double x4 = 5;
  void clear_x4();
  double x4() const;
  void set_x4(double value);
  private:
  double _internal_x4() const;
  void _internal_set_x4(double value);
  public:

  // double x5 = 6;
  void clear_x5();
  double x5() const;
  void set_x5(double value);
  private:
  double _internal_x5() const;
  void _internal_set_x5(double value);
  public:

  // double y1 = 7;
  void clear_y1();
  double y1() const;
  void set_y1(double value);
  private:
  double _internal_y1() const;
  void _internal_set_y1(double value);
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:experiments.OutputValueReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x1_;
    double x2_;
    double x3_;
    double x4_;
    double x5_;
    double y1_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_experiments_2eproto;
};
// -------------------------------------------------------------------

class AllValuesReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:experiments.AllValuesReply) */ {
 public:
  inline AllValuesReply() : AllValuesReply(nullptr) {}
  ~AllValuesReply() override;
  explicit PROTOBUF_CONSTEXPR AllValuesReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllValuesReply(const AllValuesReply& from);
  AllValuesReply(AllValuesReply&& from) noexcept
    : AllValuesReply() {
    *this = ::std::move(from);
  }

  inline AllValuesReply& operator=(const AllValuesReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllValuesReply& operator=(AllValuesReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllValuesReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllValuesReply* internal_default_instance() {
    return reinterpret_cast<const AllValuesReply*>(
               &_AllValuesReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AllValuesReply& a, AllValuesReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AllValuesReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllValuesReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllValuesReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AllValuesReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AllValuesReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AllValuesReply& from) {
    AllValuesReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllValuesReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "experiments.AllValuesReply";
  }
  protected:
  explicit AllValuesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllValuesReplyFieldNumber = 1,
  };
  // repeated .experiments.OutputValueReply allValuesReply = 1;
  int allvaluesreply_size() const;
  private:
  int _internal_allvaluesreply_size() const;
  public:
  void clear_allvaluesreply();
  ::experiments::OutputValueReply* mutable_allvaluesreply(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::experiments::OutputValueReply >*
      mutable_allvaluesreply();
  private:
  const ::experiments::OutputValueReply& _internal_allvaluesreply(int index) const;
  ::experiments::OutputValueReply* _internal_add_allvaluesreply();
  public:
  const ::experiments::OutputValueReply& allvaluesreply(int index) const;
  ::experiments::OutputValueReply* add_allvaluesreply();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::experiments::OutputValueReply >&
      allvaluesreply() const;

  // @@protoc_insertion_point(class_scope:experiments.AllValuesReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::experiments::OutputValueReply > allvaluesreply_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_experiments_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetupRequest

// int32 id = 1;
inline void SetupRequest::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t SetupRequest::_internal_id() const {
  return _impl_.id_;
}
inline int32_t SetupRequest::id() const {
  // @@protoc_insertion_point(field_get:experiments.SetupRequest.id)
  return _internal_id();
}
inline void SetupRequest::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void SetupRequest::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:experiments.SetupRequest.id)
}

// int32 samples = 2;
inline void SetupRequest::clear_samples() {
  _impl_.samples_ = 0;
}
inline int32_t SetupRequest::_internal_samples() const {
  return _impl_.samples_;
}
inline int32_t SetupRequest::samples() const {
  // @@protoc_insertion_point(field_get:experiments.SetupRequest.samples)
  return _internal_samples();
}
inline void SetupRequest::_internal_set_samples(int32_t value) {
  
  _impl_.samples_ = value;
}
inline void SetupRequest::set_samples(int32_t value) {
  _internal_set_samples(value);
  // @@protoc_insertion_point(field_set:experiments.SetupRequest.samples)
}

// double minrange = 3;
inline void SetupRequest::clear_minrange() {
  _impl_.minrange_ = 0;
}
inline double SetupRequest::_internal_minrange() const {
  return _impl_.minrange_;
}
inline double SetupRequest::minrange() const {
  // @@protoc_insertion_point(field_get:experiments.SetupRequest.minrange)
  return _internal_minrange();
}
inline void SetupRequest::_internal_set_minrange(double value) {
  
  _impl_.minrange_ = value;
}
inline void SetupRequest::set_minrange(double value) {
  _internal_set_minrange(value);
  // @@protoc_insertion_point(field_set:experiments.SetupRequest.minrange)
}

// double maxrange = 4;
inline void SetupRequest::clear_maxrange() {
  _impl_.maxrange_ = 0;
}
inline double SetupRequest::_internal_maxrange() const {
  return _impl_.maxrange_;
}
inline double SetupRequest::maxrange() const {
  // @@protoc_insertion_point(field_get:experiments.SetupRequest.maxrange)
  return _internal_maxrange();
}
inline void SetupRequest::_internal_set_maxrange(double value) {
  
  _impl_.maxrange_ = value;
}
inline void SetupRequest::set_maxrange(double value) {
  _internal_set_maxrange(value);
  // @@protoc_insertion_point(field_set:experiments.SetupRequest.maxrange)
}

// string x1name = 5;
inline void SetupRequest::clear_x1name() {
  _impl_.x1name_.ClearToEmpty();
}
inline const std::string& SetupRequest::x1name() const {
  // @@protoc_insertion_point(field_get:experiments.SetupRequest.x1name)
  return _internal_x1name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetupRequest::set_x1name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.x1name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:experiments.SetupRequest.x1name)
}
inline std::string* SetupRequest::mutable_x1name() {
  std::string* _s = _internal_mutable_x1name();
  // @@protoc_insertion_point(field_mutable:experiments.SetupRequest.x1name)
  return _s;
}
inline const std::string& SetupRequest::_internal_x1name() const {
  return _impl_.x1name_.Get();
}
inline void SetupRequest::_internal_set_x1name(const std::string& value) {
  
  _impl_.x1name_.Set(value, GetArenaForAllocation());
}
inline std::string* SetupRequest::_internal_mutable_x1name() {
  
  return _impl_.x1name_.Mutable(GetArenaForAllocation());
}
inline std::string* SetupRequest::release_x1name() {
  // @@protoc_insertion_point(field_release:experiments.SetupRequest.x1name)
  return _impl_.x1name_.Release();
}
inline void SetupRequest::set_allocated_x1name(std::string* x1name) {
  if (x1name != nullptr) {
    
  } else {
    
  }
  _impl_.x1name_.SetAllocated(x1name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.x1name_.IsDefault()) {
    _impl_.x1name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:experiments.SetupRequest.x1name)
}

// string x2name = 6;
inline void SetupRequest::clear_x2name() {
  _impl_.x2name_.ClearToEmpty();
}
inline const std::string& SetupRequest::x2name() const {
  // @@protoc_insertion_point(field_get:experiments.SetupRequest.x2name)
  return _internal_x2name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetupRequest::set_x2name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.x2name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:experiments.SetupRequest.x2name)
}
inline std::string* SetupRequest::mutable_x2name() {
  std::string* _s = _internal_mutable_x2name();
  // @@protoc_insertion_point(field_mutable:experiments.SetupRequest.x2name)
  return _s;
}
inline const std::string& SetupRequest::_internal_x2name() const {
  return _impl_.x2name_.Get();
}
inline void SetupRequest::_internal_set_x2name(const std::string& value) {
  
  _impl_.x2name_.Set(value, GetArenaForAllocation());
}
inline std::string* SetupRequest::_internal_mutable_x2name() {
  
  return _impl_.x2name_.Mutable(GetArenaForAllocation());
}
inline std::string* SetupRequest::release_x2name() {
  // @@protoc_insertion_point(field_release:experiments.SetupRequest.x2name)
  return _impl_.x2name_.Release();
}
inline void SetupRequest::set_allocated_x2name(std::string* x2name) {
  if (x2name != nullptr) {
    
  } else {
    
  }
  _impl_.x2name_.SetAllocated(x2name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.x2name_.IsDefault()) {
    _impl_.x2name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:experiments.SetupRequest.x2name)
}

// string x3name = 7;
inline void SetupRequest::clear_x3name() {
  _impl_.x3name_.ClearToEmpty();
}
inline const std::string& SetupRequest::x3name() const {
  // @@protoc_insertion_point(field_get:experiments.SetupRequest.x3name)
  return _internal_x3name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetupRequest::set_x3name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.x3name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:experiments.SetupRequest.x3name)
}
inline std::string* SetupRequest::mutable_x3name() {
  std::string* _s = _internal_mutable_x3name();
  // @@protoc_insertion_point(field_mutable:experiments.SetupRequest.x3name)
  return _s;
}
inline const std::string& SetupRequest::_internal_x3name() const {
  return _impl_.x3name_.Get();
}
inline void SetupRequest::_internal_set_x3name(const std::string& value) {
  
  _impl_.x3name_.Set(value, GetArenaForAllocation());
}
inline std::string* SetupRequest::_internal_mutable_x3name() {
  
  return _impl_.x3name_.Mutable(GetArenaForAllocation());
}
inline std::string* SetupRequest::release_x3name() {
  // @@protoc_insertion_point(field_release:experiments.SetupRequest.x3name)
  return _impl_.x3name_.Release();
}
inline void SetupRequest::set_allocated_x3name(std::string* x3name) {
  if (x3name != nullptr) {
    
  } else {
    
  }
  _impl_.x3name_.SetAllocated(x3name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.x3name_.IsDefault()) {
    _impl_.x3name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:experiments.SetupRequest.x3name)
}

// string x4name = 8;
inline void SetupRequest::clear_x4name() {
  _impl_.x4name_.ClearToEmpty();
}
inline const std::string& SetupRequest::x4name() const {
  // @@protoc_insertion_point(field_get:experiments.SetupRequest.x4name)
  return _internal_x4name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetupRequest::set_x4name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.x4name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:experiments.SetupRequest.x4name)
}
inline std::string* SetupRequest::mutable_x4name() {
  std::string* _s = _internal_mutable_x4name();
  // @@protoc_insertion_point(field_mutable:experiments.SetupRequest.x4name)
  return _s;
}
inline const std::string& SetupRequest::_internal_x4name() const {
  return _impl_.x4name_.Get();
}
inline void SetupRequest::_internal_set_x4name(const std::string& value) {
  
  _impl_.x4name_.Set(value, GetArenaForAllocation());
}
inline std::string* SetupRequest::_internal_mutable_x4name() {
  
  return _impl_.x4name_.Mutable(GetArenaForAllocation());
}
inline std::string* SetupRequest::release_x4name() {
  // @@protoc_insertion_point(field_release:experiments.SetupRequest.x4name)
  return _impl_.x4name_.Release();
}
inline void SetupRequest::set_allocated_x4name(std::string* x4name) {
  if (x4name != nullptr) {
    
  } else {
    
  }
  _impl_.x4name_.SetAllocated(x4name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.x4name_.IsDefault()) {
    _impl_.x4name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:experiments.SetupRequest.x4name)
}

// string x5name = 9;
inline void SetupRequest::clear_x5name() {
  _impl_.x5name_.ClearToEmpty();
}
inline const std::string& SetupRequest::x5name() const {
  // @@protoc_insertion_point(field_get:experiments.SetupRequest.x5name)
  return _internal_x5name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetupRequest::set_x5name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.x5name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:experiments.SetupRequest.x5name)
}
inline std::string* SetupRequest::mutable_x5name() {
  std::string* _s = _internal_mutable_x5name();
  // @@protoc_insertion_point(field_mutable:experiments.SetupRequest.x5name)
  return _s;
}
inline const std::string& SetupRequest::_internal_x5name() const {
  return _impl_.x5name_.Get();
}
inline void SetupRequest::_internal_set_x5name(const std::string& value) {
  
  _impl_.x5name_.Set(value, GetArenaForAllocation());
}
inline std::string* SetupRequest::_internal_mutable_x5name() {
  
  return _impl_.x5name_.Mutable(GetArenaForAllocation());
}
inline std::string* SetupRequest::release_x5name() {
  // @@protoc_insertion_point(field_release:experiments.SetupRequest.x5name)
  return _impl_.x5name_.Release();
}
inline void SetupRequest::set_allocated_x5name(std::string* x5name) {
  if (x5name != nullptr) {
    
  } else {
    
  }
  _impl_.x5name_.SetAllocated(x5name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.x5name_.IsDefault()) {
    _impl_.x5name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:experiments.SetupRequest.x5name)
}

// -------------------------------------------------------------------

// OutputValueReply

// int32 id = 1;
inline void OutputValueReply::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t OutputValueReply::_internal_id() const {
  return _impl_.id_;
}
inline int32_t OutputValueReply::id() const {
  // @@protoc_insertion_point(field_get:experiments.OutputValueReply.id)
  return _internal_id();
}
inline void OutputValueReply::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void OutputValueReply::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:experiments.OutputValueReply.id)
}

// double x1 = 2;
inline void OutputValueReply::clear_x1() {
  _impl_.x1_ = 0;
}
inline double OutputValueReply::_internal_x1() const {
  return _impl_.x1_;
}
inline double OutputValueReply::x1() const {
  // @@protoc_insertion_point(field_get:experiments.OutputValueReply.x1)
  return _internal_x1();
}
inline void OutputValueReply::_internal_set_x1(double value) {
  
  _impl_.x1_ = value;
}
inline void OutputValueReply::set_x1(double value) {
  _internal_set_x1(value);
  // @@protoc_insertion_point(field_set:experiments.OutputValueReply.x1)
}

// double x2 = 3;
inline void OutputValueReply::clear_x2() {
  _impl_.x2_ = 0;
}
inline double OutputValueReply::_internal_x2() const {
  return _impl_.x2_;
}
inline double OutputValueReply::x2() const {
  // @@protoc_insertion_point(field_get:experiments.OutputValueReply.x2)
  return _internal_x2();
}
inline void OutputValueReply::_internal_set_x2(double value) {
  
  _impl_.x2_ = value;
}
inline void OutputValueReply::set_x2(double value) {
  _internal_set_x2(value);
  // @@protoc_insertion_point(field_set:experiments.OutputValueReply.x2)
}

// double x3 = 4;
inline void OutputValueReply::clear_x3() {
  _impl_.x3_ = 0;
}
inline double OutputValueReply::_internal_x3() const {
  return _impl_.x3_;
}
inline double OutputValueReply::x3() const {
  // @@protoc_insertion_point(field_get:experiments.OutputValueReply.x3)
  return _internal_x3();
}
inline void OutputValueReply::_internal_set_x3(double value) {
  
  _impl_.x3_ = value;
}
inline void OutputValueReply::set_x3(double value) {
  _internal_set_x3(value);
  // @@protoc_insertion_point(field_set:experiments.OutputValueReply.x3)
}

// double x4 = 5;
inline void OutputValueReply::clear_x4() {
  _impl_.x4_ = 0;
}
inline double OutputValueReply::_internal_x4() const {
  return _impl_.x4_;
}
inline double OutputValueReply::x4() const {
  // @@protoc_insertion_point(field_get:experiments.OutputValueReply.x4)
  return _internal_x4();
}
inline void OutputValueReply::_internal_set_x4(double value) {
  
  _impl_.x4_ = value;
}
inline void OutputValueReply::set_x4(double value) {
  _internal_set_x4(value);
  // @@protoc_insertion_point(field_set:experiments.OutputValueReply.x4)
}

// double x5 = 6;
inline void OutputValueReply::clear_x5() {
  _impl_.x5_ = 0;
}
inline double OutputValueReply::_internal_x5() const {
  return _impl_.x5_;
}
inline double OutputValueReply::x5() const {
  // @@protoc_insertion_point(field_get:experiments.OutputValueReply.x5)
  return _internal_x5();
}
inline void OutputValueReply::_internal_set_x5(double value) {
  
  _impl_.x5_ = value;
}
inline void OutputValueReply::set_x5(double value) {
  _internal_set_x5(value);
  // @@protoc_insertion_point(field_set:experiments.OutputValueReply.x5)
}

// double y1 = 7;
inline void OutputValueReply::clear_y1() {
  _impl_.y1_ = 0;
}
inline double OutputValueReply::_internal_y1() const {
  return _impl_.y1_;
}
inline double OutputValueReply::y1() const {
  // @@protoc_insertion_point(field_get:experiments.OutputValueReply.y1)
  return _internal_y1();
}
inline void OutputValueReply::_internal_set_y1(double value) {
  
  _impl_.y1_ = value;
}
inline void OutputValueReply::set_y1(double value) {
  _internal_set_y1(value);
  // @@protoc_insertion_point(field_set:experiments.OutputValueReply.y1)
}

// -------------------------------------------------------------------

// AllValuesReply

// repeated .experiments.OutputValueReply allValuesReply = 1;
inline int AllValuesReply::_internal_allvaluesreply_size() const {
  return _impl_.allvaluesreply_.size();
}
inline int AllValuesReply::allvaluesreply_size() const {
  return _internal_allvaluesreply_size();
}
inline void AllValuesReply::clear_allvaluesreply() {
  _impl_.allvaluesreply_.Clear();
}
inline ::experiments::OutputValueReply* AllValuesReply::mutable_allvaluesreply(int index) {
  // @@protoc_insertion_point(field_mutable:experiments.AllValuesReply.allValuesReply)
  return _impl_.allvaluesreply_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::experiments::OutputValueReply >*
AllValuesReply::mutable_allvaluesreply() {
  // @@protoc_insertion_point(field_mutable_list:experiments.AllValuesReply.allValuesReply)
  return &_impl_.allvaluesreply_;
}
inline const ::experiments::OutputValueReply& AllValuesReply::_internal_allvaluesreply(int index) const {
  return _impl_.allvaluesreply_.Get(index);
}
inline const ::experiments::OutputValueReply& AllValuesReply::allvaluesreply(int index) const {
  // @@protoc_insertion_point(field_get:experiments.AllValuesReply.allValuesReply)
  return _internal_allvaluesreply(index);
}
inline ::experiments::OutputValueReply* AllValuesReply::_internal_add_allvaluesreply() {
  return _impl_.allvaluesreply_.Add();
}
inline ::experiments::OutputValueReply* AllValuesReply::add_allvaluesreply() {
  ::experiments::OutputValueReply* _add = _internal_add_allvaluesreply();
  // @@protoc_insertion_point(field_add:experiments.AllValuesReply.allValuesReply)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::experiments::OutputValueReply >&
AllValuesReply::allvaluesreply() const {
  // @@protoc_insertion_point(field_list:experiments.AllValuesReply.allValuesReply)
  return _impl_.allvaluesreply_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace experiments

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_experiments_2eproto
